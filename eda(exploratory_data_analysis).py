# -*- coding: utf-8 -*-
"""EDA(Exploratory_data_Analysis).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MSv9xsESovR0muM9Bf04Vb0DYFow7sfc

# **LOAD THE DATASET**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
df=pd.read_csv("/content/drive/MyDrive/ecommerce_product_dataset.csv")
df

"""# **ANALYZING THE DATA**"""

df.head(5)

df.tail(5)

df.shape

df.info()

df.describe()

df.describe().T.plot(kind='bar')

df.describe(include='all').T

"""# **DATA CLEANING**

---

**FINDING MISSING VALUES**
"""

df.isnull().sum()

"""**PERCENTAGE OF MISSING VALUES**"""

(df.isnull().sum()/(len(df)))*100

"""**DUPLICATES**"""

df[df.duplicated(keep="first")]
df.duplicated().sum()

"""**OUTLIERS**"""

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 6))
sns.boxplot(x=df['Price'])
plt.show()

"""# **FEATURE ENGINEERING**"""

df['DateAdded']=pd.to_datetime(df['DateAdded'])
df['yearAdded']=df['DateAdded'].dt.year
df['monthadded']=df['DateAdded'].dt.month
df['dayadded']=df['DateAdded'].dt.day

df.dtypes

df['Category'].unique()

"""**Categorical Encoding**"""

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['Category_Encoded'] = le.fit_transform(df['Category'])

df['Category_Encoded'].unique()

import numpy as np
cat_cols=df.select_dtypes(include=['object']).columns
num_col= df.select_dtypes(include=np.number).columns.tolist()
print("Categorical Variables:")
print(cat_cols)
print("Numerical Variables:")
print(num_col)
num_cols=['Price', 'Rating', 'NumReviews', 'StockQuantity', 'Discount', 'Sales', 'yearAdded', 'monthadded', 'dayadded', 'Category_Encoded']

"""# **UNIVARIATE ANALYSIS**

---

**NUMERICAL FEATURES**
"""

for col in num_cols:
    print(col)
    plt.figure(figsize = (15, 4))
    plt.subplot(1, 2, 1)
    df[col].hist(grid=False)
    plt.ylabel('count')
    plt.subplot(1, 2, 2)
    sns.boxplot(x=df[col])
    plt.show()

"""**DISTRIBUTION OF NUMERICAL FEATURES**"""

plt.figure(figsize=(12, 8))

plt.subplot(2, 2, 1)
sns.histplot(df['Price'], bins=30, kde=True, color='skyblue')
plt.title('Distribution of Price')

plt.subplot(2, 2, 2)
sns.histplot(df['Rating'], bins=20, kde=True, color='salmon')
plt.title('Distribution of Rating')

plt.subplot(2, 2, 3)
sns.histplot(df['NumReviews'], bins=30, kde=True, color='green')
plt.title('Distribution of Number of Reviews')

plt.subplot(2, 2, 4)
sns.histplot(df['StockQuantity'], bins=30, kde=True, color='orange')
plt.title('Distribution of Stock Quantity')

plt.tight_layout()
plt.show()

"""**CATEGORICAL FEATURES**"""

cat_cols = ['Category', 'City', 'ProductName']

plt.figure(figsize=(20, 10))

for i, col in enumerate(cat_cols):
    plt.subplot(3, 1, i + 1)
    sns.countplot(x=col, data=df)
    plt.xticks(rotation=90)

plt.tight_layout()
plt.show()

"""**DISTRIBUTION OF CATEGORICAL FEATURES**"""

plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
sns.countplot(y='Category', data=df, order=df['Category'].value_counts().index, palette='viridis')
plt.title('Distribution of Product Categories')

plt.subplot(1, 2, 2)
sns.countplot(y='ProductName', data=df, order=df['ProductName'].value_counts().index[:10], palette='plasma')
plt.title('Top 10 Products')

plt.tight_layout()
plt.show()

"""**BIVARIATE ANALYSIS**

---



 Bivariate Analysis helps to understand how variables are related to each other and the relationship between dependent and independent variables present in the dataset.

 For Numerical variables, Pair plots and Scatter plots are widely been used to do Bivariate Analysis.

A Stacked bar chart can be used for categorical variables if the output variable is a classifier. Bar plots can be used if the output variable is continuous
"""

plt.figure(figsize=(10, 6))
sns.pairplot(df[['Price', 'Rating', 'NumReviews', 'StockQuantity']])
plt.suptitle('Pairplot of Numerical Features', y=1.02)
plt.show()

plt.figure(figsize=(10, 6))
sns.heatmap(df.select_dtypes(include=['float64', 'int64']).corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(x='Category', y='Price', data=df)
plt.xlabel('Category')
plt.ylabel('Price')
plt.title('Price Distribution by Category')
plt.xticks(rotation=90)
plt.show()

"""# **TRENDS OF SALES**

---

"""

import matplotlib.pyplot as plt
sales_trends=df.groupby('monthadded')['Sales'].sum()
sales_trends.plot(marker='*',color='blue')
plt.xlabel('Month')
plt.ylabel('Sales')
plt.title('Sales Trends')
plt.xticks(ticks=range(1,13), labels=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])
plt.show()

df['YearMonth'] = df['DateAdded'].dt.to_period('M')
sales_by_month=df.groupby(df['YearMonth'])['Sales'].sum()
sales_by_month.plot(marker='*', color='blue')
plt.xlabel('Year')
plt.ylabel('Sales')
plt.title('Sales Trend over Years')
plt.xticks(rotation=90)
plt.show()

import matplotlib.pyplot as plt
sales_trends = df.groupby('yearAdded')['Sales'].sum()
sales_trends.plot(marker='*', color='blue')
plt.xlabel('Year')
plt.ylabel('Sales')
plt.title('Sales Trend over Years')
plt.xticks(rotation=90)
plt.show()

df.columns

"""**SALES BY CATEGORY**"""

category_sales=df.groupby(df['Category'])['Sales'].sum()
category_sales.plot(kind='bar',color='salmon')
plt.xlabel('category')
plt.ylabel('Sales')
plt.title('sales by category')
plt.xticks(rotation=90)
plt.show()

"""**SALES BY CITY**"""

city_sales=df.groupby(df['City'])['Sales'].sum().sort_values(ascending=False).head(10)
city_sales.plot(kind='pie',autopct="%1.1f%%")
plt.title('sales by city (top 10)')
plt.axis('equal')
plt.show()

"""**AVERAGE RATING,REVIEWS,SALES OF TOP 10 CATEGORIES**"""

import matplotlib.pyplot as plt
plt.figure(figsize=(15, 6))

plt.subplot(1, 3, 1)
df.groupby('Category')['Rating'].mean().sort_values(ascending=False).head(10).plot(kind='bar')
plt.title('Top 10 Categories by Average Rating')
plt.xlabel('Category')
plt.ylabel('Average Rating')

plt.subplot(1, 3, 2)
df.groupby('Category')['NumReviews'].mean().sort_values(ascending=False).head(10).plot(kind='bar')
plt.title('Top 10 Categories by Average Number of Reviews')
plt.xlabel('Category')
plt.ylabel('Average Number of Reviews')

plt.subplot(1, 3, 3)
df.groupby('Category')['Sales'].mean().sort_values(ascending=False).head(10).plot(kind='bar')
plt.title('Top 10 Categories by Average Sales')
plt.xlabel('Category')
plt.ylabel('Average Sales')

plt.tight_layout()
plt.show()